var Timer tEntranceStairLights = null

rule "Entrance Stair Light PIR"
when
    Item gEntrancePIR changed from 1 to 0 or
	Item gEntrancePIR changed from 0 to 1 
then
logInfo("-07-PIR_Sensors.R1", "### Entrance PIR Received Update ###")

{
	if(gPresent.state == ON) {	//someone home, lets make the PIR's useable. If no one is home lets ignore the dogs
		// PIR Values:
		// 1 = ON
		// 2 = OFF
		
		// Motion Detected AND Is Dark or Cloudy AND Lights are off
		//-->Turn Lights ON
		if(gEntrancePIR.state == 1 && (SunElevation.state < 30 || Clouds.state > 80) && vEntranceStairLights.state == 0) {
			sendCommand(vEntranceStairLights, 100)
			logInfo("-07-PIR_Sensors.R1", "--> Motion Detected & Dark Out. Turning Lights ON")
			
			
		//PIR is Off, Stair Manual Timer isn't active
		//-->Turn Lights OFF
		} else if(gEntrancePIR.state == 0) { 		// PIR OFF
			if(tEntranceStairLights === null) { 		//TIMER not running
				sendCommand(vEntranceStairLights, 0)	//--> Turn Lights off
				logInfo("-07-PIR_Sensors.R1", "--> No More Motion. Turning Lights OFF")
			} else {
		//Stair Manual timer IS active
		//-->Reschedule timer now+3mins
				logInfo("-07-PIR_Sensors.R1", "--> PIR OFF. Stair Timer Currently Active. Waiting for Timer to Expire then turning Lights OFF ")
			}
			
		} 
		
	}
}
end

rule "vEntranceStairLights Off Timer"
when
    Item vEntranceStairLights changed
then
logInfo("-07-PIR_Sensors.R2", "### vEntranceStairLights Off Timer ###")
{ 
	//Stair Lights are not OFF. Dimmer is >1% -- ELSE -- Check if lights were turned off and timer !null. then cancel timer
	//Timer isn't active -- ELSE -- Reschedule Timer
	//Create OFF timer
		//When timer runs out, check PIR to make sure it's off before turning lits OFF. -- ELSE -- Reschedule timer
	if(vEntranceStairLights.state != 0) {
		if(tEntranceStairLights === null) { 
			logInfo("-07-PIR_Sensors.R2", "--> Stair Lights turned ON. Creating OFF timer tEntranceStairLights")
			tEntranceStairLights = createTimer(now.plusSeconds(60)) [|
				if(gEntrancePIR.state == 0) { 
					sendCommand(vEntranceStairLights, 0)
					tEntranceStairLights = null
					logInfo("-07-PIR_Sensors.R2", "--> Timer Expired. Turning Stair Lights off")
				} else {
					tEntranceStairLights.reschedule(now.plusSeconds(60))
					logInfo("-07-PIR_Sensors.R2", "--> Timer Expired but EntranceStair PIR Detected Motion. Rescheduling Stair Lights.")
				}
			]
		} else {
			tEntranceStairLights.reschedule(now.plusSeconds(60))
			logInfo("-07-PIR_Sensors.R2", "--> Timer Active. Rescheduling tEntranceStairLights")
		}	
	} else if(vEntranceStairLights.state == 0){
		if(tEntranceStairLights !== null) {
			tEntranceStairLights.cancel()
			tEntranceStairLights = null
		}
		gEntrancePIR.sendCommand(0)
		logInfo("-07-PIR_Sensors.R2", "--> Lights Turned OFF. Canceling tEntranceStairLights")
	}
}
end

rule "House Door: OPEN/UNLOCKED Stairwell Lighting"
when
       Item vHouseDoor changed from CLOSED to OPEN or 
	   Item vHouseLock_Proxy changed from LOCKED to UNLOCKED
then
	logInfo("-07-PIR_Sensors.R3", "### House Door: OPEN/UNLOCKED Stairwell Lighting ###")

{	
		if(NightState.state == ON){ 								//Dark Outside
			if(tEntranceStairLights === null ) {					//turn stairwell  lights on when door opens
				sendCommand(vEntranceStairLights, 100)
				logInfo("-07-PIR_Sensors.R3", "--> Door Unlocked||OPENED. Turning Stairwell Lights ON")
			}		
		}
}
end




rule "Entrance Stair Lights Scene Control"
    when
        Item vEntranceStairLights_Scene received update 
    then
    logInfo("-07-PIR_Sensors.R4", "### Entrance Stair Lights Scene Control ###")
    {
		switch(vEntranceStairLights_Scene.state) {
			/*ON*/
			case 1.0 : {							/* Single Tap ON */
				logInfo("-07-PIR_Sensors.R4", "Single Press ON")
						vEntranceStairLights.sendCommand(100)
			}
			case 1.3 : {							/* Double Tap ON */
			    logInfo("-07-PIR_Sensors.R4", "Double Press ON")
		
				
			}
			case 1.4 : { 							/* Tripple Tap ON */
			   	logInfo("-07-PIR_Sensors.R4", "Tripple Press ON")

			}
			/*OFF*/
			case 2.0 : {							/* Single Tap OFF */
				logInfo("-07-PIR_Sensors.R4", "Single Press OFF")
			    }
			case 2.3 : {							/* Double Tap OFF */
			    logInfo("-07-PIR_Sensors.R4", "Double Press OFF")
			}
			case 2.4 : { 							/* Tripple Tap OFF */
			   logInfo("-07-PIR_Sensors.R4", "Tripple Press OFF")

			}
		}
    }

    end